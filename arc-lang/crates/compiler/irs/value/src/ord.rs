use crate::*;

impl PartialOrd for Value {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        match (self.kind.as_ref(), other.kind.as_ref()) {
            (VAggregator(a), VAggregator(b)) => unreachable!(),
            (VArray(a), VArray(b)) => a.partial_cmp(b),
            (VBlob(a), VBlob(b)) => unreachable!(),
            (VBool(a), VBool(b)) => a.partial_cmp(b),
            (VChar(a), VChar(b)) => a.partial_cmp(b),
            (VDiscretizer(a), VDiscretizer(b)) => unreachable!(),
            (VDuration(a), VDuration(b)) => a.partial_cmp(b),
            (VEncoding(a), VEncoding(b)) => a.partial_cmp(b),
            (VF32(a), VF32(b)) => a.partial_cmp(b),
            (VF64(a), VF64(b)) => a.partial_cmp(b),
            (VFile(a), VFile(b)) => unreachable!(),
            (VFunction(a), VFunction(b)) => a.partial_cmp(b),
            (VI8(a), VI8(b)) => a.partial_cmp(b),
            (VI16(a), VI16(b)) => a.partial_cmp(b),
            (VI32(a), VI32(b)) => a.partial_cmp(b),
            (VI64(a), VI64(b)) => a.partial_cmp(b),
            (VU8(a), VU8(b)) => a.partial_cmp(b),
            (VU16(a), VU16(b)) => a.partial_cmp(b),
            (VU32(a), VU32(b)) => a.partial_cmp(b),
            (VU64(a), VU64(b)) => a.partial_cmp(b),
            (VUsize(a), VUsize(b)) => a.partial_cmp(b),
            (VMatrix(a), VMatrix(b)) => unreachable!(),
            (VModel(a), VModel(b)) => unreachable!(),
            (VOption(a), VOption(b)) => a.partial_cmp(b),
            (VPath(a), VPath(b)) => a.partial_cmp(b),
            (VReader(a), VReader(b)) => unreachable!(),
            (VRecord(a), VRecord(b)) => a.partial_cmp(b),
            (VVariant(a), VVariant(b)) => a.partial_cmp(b),
            (VResult(a), VResult(b)) => a.partial_cmp(b),
            (VSocketAddr(a), VSocketAddr(b)) => a.partial_cmp(b),
            (VStream(a), VStream(b)) => unreachable!(),
            (VString(a), VString(b)) => a.partial_cmp(b),
            (VTime(a), VTime(b)) => a.partial_cmp(b),
            (VTimeSource(a), VTimeSource(b)) => unreachable!(),
            (VTuple(a), VTuple(b)) => a.partial_cmp(b),
            (VUsize(a), VUsize(b)) => a.partial_cmp(b),
            (VUnit(a), VUnit(b)) => a.partial_cmp(b),
            (VUrl(a), VUrl(b)) => a.partial_cmp(b),
            (VVec(a), VVec(b)) => a.partial_cmp(b),
            (VWriter(a), VWriter(b)) => unreachable!(),
            _ => unreachable!(),
        }
    }
}

impl Ord for Value {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        match (self.kind.as_ref(), other.kind.as_ref()) {
            (VAggregator(a), VAggregator(b)) => unreachable!(),
            (VArray(a), VArray(b)) => a.cmp(b),
            (VBlob(a), VBlob(b)) => unreachable!(),
            (VBool(a), VBool(b)) => a.cmp(b),
            (VChar(a), VChar(b)) => a.cmp(b),
            (VDiscretizer(a), VDiscretizer(b)) => unreachable!(),
            (VDuration(a), VDuration(b)) => a.cmp(b),
            (VEncoding(a), VEncoding(b)) => a.cmp(b),
            (VF32(a), VF32(b)) => unreachable!(),
            (VF64(a), VF64(b)) => unreachable!(),
            (VFile(a), VFile(b)) => unreachable!(),
            (VFunction(a), VFunction(b)) => a.cmp(b),
            (VI8(a), VI8(b)) => a.cmp(b),
            (VI16(a), VI16(b)) => a.cmp(b),
            (VI32(a), VI32(b)) => a.cmp(b),
            (VI64(a), VI64(b)) => a.cmp(b),
            (VU8(a), VU8(b)) => a.cmp(b),
            (VU16(a), VU16(b)) => a.cmp(b),
            (VU32(a), VU32(b)) => a.cmp(b),
            (VU64(a), VU64(b)) => a.cmp(b),
            (VUsize(a), VUsize(b)) => a.cmp(b),
            (VMatrix(a), VMatrix(b)) => unreachable!(),
            (VModel(a), VModel(b)) => unreachable!(),
            (VOption(a), VOption(b)) => a.cmp(b),
            (VPath(a), VPath(b)) => a.cmp(b),
            (VReader(a), VReader(b)) => unreachable!(),
            (VRecord(a), VRecord(b)) => a.cmp(b),
            (VVariant(a), VVariant(b)) => a.cmp(b),
            (VResult(a), VResult(b)) => a.cmp(b),
            (VSocketAddr(a), VSocketAddr(b)) => a.cmp(b),
            (VStream(a), VStream(b)) => unreachable!(),
            (VString(a), VString(b)) => a.cmp(b),
            (VTime(a), VTime(b)) => a.cmp(b),
            (VTimeSource(a), VTimeSource(b)) => unreachable!(),
            (VTuple(a), VTuple(b)) => a.cmp(b),
            (VUsize(a), VUsize(b)) => a.cmp(b),
            (VUnit(a), VUnit(b)) => a.cmp(b),
            (VUrl(a), VUrl(b)) => a.cmp(b),
            (VVec(a), VVec(b)) => a.cmp(b),
            (VWriter(a), VWriter(b)) => unreachable!(),
            _ => unreachable!(),
        }
    }
}
