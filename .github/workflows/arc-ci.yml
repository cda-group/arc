name: Arc CI

on: [push]

# Some taken from
# https://github.com/hiyainc-oss/trie-map/blob/5b892223e50854a4e0f9f86cd20c91efb5985126/.github/workflows/scala.yml

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v1

    - name: Install JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v1

    - name: Cache Ivy
      id: cache-ivy
      uses: actions/cache@v1.0.3
      with:
        path: ~/.ivy2
        key: ${{ runner.os }}-ivy-${{ hashFiles('arc-frontend/**/*.sbt') }}

    - name: Cache SBT
      id: cache-sbt
      uses: actions/cache@v1.0.3
      with:
        path: ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('arc-frontend/**/*.sbt') }}

    - name: Cache arc-frontend
      id: cache-arc-frontend
      uses: actions/cache@v1.0.3
      with:
        path: arc-frontend/target
        key: ${{ runner.os }}-arc-frontend-${{ hashFiles('arc-frontend/**/*.sbt') }}-${{ hashFiles('arc-frontend/src/**/**') }}

    # - name: Cache arc-mlir
    #   id: cache-arc-mlir
    #   uses: actions/cache@v1.0.3
    #   with:
    #     path: $A2M_BUILD
    #     key: ${{ runner.os }}-arc-mlir-${{ hashFiles('arc-mlir/src/**/**') }}-${{ hashFiles('.gitmodules') }}

    # - name: Cache LLVM submodule
    #   id: cache-llvm
    #   uses: actions/cache@v1.0.3
    #   with:
    #     path: arc-mlir/llvm-project
    #     key: cache-llvm

    - uses: actions/cache@v1.0.3
      id: mlir-cache
      with:
        path: build.tgz.a
        key: mlir-cache-a

    - uses: actions/cache@v1.0.3
      with:
        path: build.tgz.b
        key: mlir-cache-b

    - uses: actions/cache@v1.0.3
      with:
        path: build.tgz.c
        key: mlir-cache-c

    - uses: actions/cache@v1.0.3
      with:
        path: build.tgz.d
        key: mlir-cache-d

    - uses: actions/cache@v1.0.3
      with:
        path: build.tgz.e
        key: mlir-cache-e

    - name: Hack - Join MLIR cache pieces
      if: steps.mlir-cache.outputs.cache-hit == 'true'
      run: |
        # Join cache pieces into one archive
        cat build.tgz.* > build.tgz
        # Unzip the archive and put it in the build directory
        tar -zxvf build.tgz ${{ format('{0}/build/', runner.temp) }}

    - name: Update submodule
      run: git submodule update --init --recursive

    - name: Build and test arc-frontend
      run: |
        cd arc-frontend
        sbt test assembly

    - name: Build and test arc-mlir
      run: |
        cd arc-mlir
        ./arc-mlir-build
        cd $A2M_BUILD/llvm-build/
        ninja check-arc-mlir
      env:
        A2M_BUILD: ${{ format('{0}/build', runner.temp) }}
        A2M_ASSERTS: 1
        A2M_CONDITIONAL_CACHE: 0
        BUILD_FLAVOUR: MinSizeRel

    # Get around that damn caching the limit
    - name: Hack - Cache MLIR build dir
      run: |
        # Cache the build directory
        tar -cz -f build.tgz ${{ format('{0}/build', runner.temp) }}
        # Split the cache into chunks of 400MB
        split -b 400m build.tgz build.tgz.

