#!/bin/bash

set -e

export PATH="@ARC_TOOLS_BIN_DIR@:$PATH"
export ARC_LANG_SOURCE_DIR="@ARC_LANG_SRC_DIR@"
export ARC_MLIR_SOURCE_DIR="@ARC_MLIR_SRC_DIR@"
export ARC_CODEGEN_SOURCE_DIR="@ARC_CODEGEN_SRC_DIR@"
export ARC_RUNTIME_SOURCE_DIR="@ARC_RUNTIME_SRC_DIR@"

WORK_DIR="$1"
MLIR_FILE="$2"
shift 2 # The rest of the arguments goes to arc-mlir

MAIN="${WORK_DIR}/src/main.rs"
TEST_NAME=$(basename ${WORK_DIR})
TEST_NAME=${TEST_NAME//.mlir.tmp/}
export TEST_NAME=${TEST_NAME//-/_}

CARGO_DEP_FRAGMENT="${MLIR_FILE%.mlir}.cargo-dep"
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
rustc --version
echo "Arc-lang sources are in: ${ARC_LANG_SOURCE_DIR}"
echo "Test name: ${TEST_NAME}"
echo "MLIR input: ${MLIR_FILE}"
echo "Crate will be written to: ${WORK_DIR}"
echo "arc-mlir arguments: $@"
if [ -f "${CARGO_DEP_FRAGMENT}.cargo-dep" ]; then
    echo "cargo dependency fragment: ${CARGO_DEP_FRAGMENT}"
fi
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

# Clean the work directory
rm -rf ${WORK_DIR}
mkdir -p ${WORK_DIR}/src

# Create the Cargo.toml
envsubst > ${WORK_DIR}/Cargo.toml <<'EOF'
[package]
name        = "${TEST_NAME}"
version     = "0.0.0"
authors     = ["The arc-mlir testing gnome"]
edition     = "2018"
license     = "MIT"
description = "Generic MLIR-to-Rust test case"

[dependencies]
insta               = { version = "1.6.0", features = ["glob"] }
regex               = { version = "1.4.3" }
lazy_static         = { version = "1.4.0" }
# arcon               = { git = "https://github.com/segeljakt/arcon" }
arc-codegen         = { version = "=0.0.0", path = "${ARC_CODEGEN_SOURCE_DIR}" }
arc-runtime         = { version = "=0.0.0", path = "${ARC_RUNTIME_SOURCE_DIR}" }
hexf                = { version = "0.2.1" }
ndarray             = { version = "0.13.0" }
prost               = { version = "0.7.0" }
EOF

# Allow a test to include extra dependencies in the Cargo.toml
if [ -f "${CARGO_DEP_FRAGMENT}" ]; then
    envsubst >> ${WORK_DIR}/Cargo.toml < "${CARGO_DEP_FRAGMENT}"
fi

# Create dummy wrapper .rs-file which includes the generated test-case

echo '#![feature(unboxed_closures)]' > ${MAIN}
arc-mlir -arc-to-rust -inline-rust ${MLIR_FILE} "$@" >> ${MAIN}

cat >> ${MAIN} <<EOF
fn main() {
    println!("All is well!");
}
EOF

echo 'Rust file:'
cat "${MAIN}"

exec arc-cargo test -j 1 --manifest-path=${WORK_DIR}/Cargo.toml
