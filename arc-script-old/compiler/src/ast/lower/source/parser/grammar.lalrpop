use crate::ast::*;
use crate::info::Info;
use crate::info::files::{FileId, ByteIndex};
use crate::info::paths::{PathInterner, PathId};
use crate::info::names::{NameInterner, NameId};
use crate::info::diags::{DiagInterner, Diagnostic};
use crate::ast::lower::source::lexer::sem_tokens::Token;
use lalrpop_util::ErrorRecovery;
use time::Duration;
use time::PrimitiveDateTime as DateTime;

//=============================================================================
// Grammar
//=============================================================================

grammar(
    file: FileId,
    exprs: &mut ExprInterner,
    types: &mut TypeInterner,
    pats: &mut PatInterner,
    paths: &mut PathInterner,
    diags: &mut DiagInterner,
);

extern {
    type Error = ();
    type Location = ByteIndex;

    enum Token {
        Indent => Token::Indent,
        Dedent => Token::Dedent,
//=============================================================================
// Grouping
//=============================================================================
        "{"  => Token::BraceL,
        "}"  => Token::BraceR,
        "{}" => Token::BraceLR,
        "["  => Token::BrackL,
        "]"  => Token::BrackR,
        "[]" => Token::BrackLR,
        "("  => Token::ParenL,
        ")"  => Token::ParenR,
        "()" => Token::ParenLR,
        "<"  => Token::AngleL,
        ">"  => Token::AngleR,
        "<>" => Token::AngleLR,
//=============================================================================
// Operators
//=============================================================================
        "!="  => Token::Neq,
        "%"   => Token::Percent,
        "*"   => Token::Star,
        "**"  => Token::StarStar,
        "+"   => Token::Plus,
        ","   => Token::Comma,
        "-"   => Token::Minus,
        "->"  => Token::ArrowR,
        "."   => Token::Dot,
        ".."  => Token::DotDot,
        "..=" => Token::DotDotEq,
        "/"   => Token::Slash,
        ":"   => Token::Colon,
        "::"  => Token::ColonColon,
        ";"   => Token::Semi,
        "<="  => Token::Leq,
        "="   => Token::Equ,
        "=="  => Token::EquEqu,
        "=>"  => Token::Imply,
        ">="  => Token::Geq,
        "@"   => Token::AtSign,
        "_"   => Token::Underscore,
        "|"   => Token::Bar,
        "||"  => Token::BarBar,
        "~"   => Token::Tilde,
//=============================================================================
// Unused Operators
//=============================================================================
        // "|>"  => Token::Pipe,
        // "!"   => Token::Bang,
        // "$"   => Token::Dollar,
        // "&"   => Token::Amp,
        // "&&"  => Token::AmpAmp,
        // ";;"  => Token::SemiSemi,
        // "<-"  => Token::ArrowL,
        // "?"   => Token::Qm,
        // "???" => Token::QmQmQm,
        // "^"   => Token::Caret,
//=============================================================================
// Keywords
//=============================================================================
        "after"    => Token::After,
        "and"      => Token::And,
        "as"       => Token::As,
        "band"     => Token::Band,
        "bor"      => Token::Bor,
        "break"    => Token::Break,
        "bxor"     => Token::Bxor,
        "by"       => Token::By,
        "continue" => Token::Continue,
        "crate"    => Token::Crate,
        "else"     => Token::Else,
        "emit"     => Token::Emit,
        "enum"     => Token::Enum,
        "enwrap"   => Token::Enwrap,
        "every"    => Token::Every,
        "extern"   => Token::Extern,
        "for"      => Token::For,
        "fun"      => Token::Fun,
        "if"       => Token::If,
        "in"       => Token::In,
        "is"       => Token::Is,
        "log"      => Token::Log,
        "loop"     => Token::Loop,
        "match"    => Token::Match,
        "not"      => Token::Not,
        "on"       => Token::On,
        "or"       => Token::Or,
        "return"   => Token::Return,
        "task"     => Token::Task,
        "type"     => Token::Type,
        "unwrap"   => Token::Unwrap,
        "use"      => Token::Use,
        "val"      => Token::Val,
        "var"      => Token::Var,
        "xor"      => Token::Xor,
//=============================================================================
// Unused Keywords
//=============================================================================
        // "add"      => Token::Add,
        // "box"      => Token::Box,
        // "del"      => Token::Del,
        // "do"       => Token::Do,
        // "end"      => Token::End,
        // "let"      => Token::Let,
        // "of"       => Token::Of,
        // "port"     => Token::Port,
        // "pub"      => Token::Pub,
        // "reduce"   => Token::Reduce,
        // "shutdown" => Token::Shutdown,
        // "sink"     => Token::Sink,
        // "source"   => Token::Source,
        // "startup"  => Token::Startup,
        // "state"    => Token::State,
        // "then"     => Token::Then,
        // "timeout"  => Token::Timeout,
        // "timer"    => Token::Timer,
        // "trigger"  => Token::Trigger,
        // "where"    => Token::Where,
//=============================================================================
// Primitive Types
//=============================================================================
        "bool" => Token::Bool,
        "f32"  => Token::F32,
        "f64"  => Token::F64,
        "i8"   => Token::I8,
        "i16"  => Token::I16,
        "i32"  => Token::I32,
        "i64"  => Token::I64,
        "u8"   => Token::U8,
        "u16"  => Token::U16,
        "u32"  => Token::U32,
        "u64"  => Token::U64,
        "str"  => Token::Str,
        "unit" => Token::Unit,
        "char" => Token::Char,
        "size" => Token::Size,
//=============================================================================
// Identifiers and Literals
//=============================================================================
        NameId      => Token::NameId(<NameId>),
        LitI8       => Token::LitI8(<i8>),
        LitI16      => Token::LitI16(<i16>),
        LitI32      => Token::LitI32(<i32>),
        LitI64      => Token::LitI64(<i64>),
        LitU8       => Token::LitU8(<u8>),
        LitU16      => Token::LitU16(<u16>),
        LitU32      => Token::LitU32(<u32>),
        LitU64      => Token::LitU64(<u64>),
        LitF32      => Token::LitF32(<f32>),
        LitF64      => Token::LitF64(<f64>),
        LitBool     => Token::LitBool(<bool>),
        LitChar     => Token::LitChar(<char>),
        LitStr      => Token::LitStr(<String>),
        LitDateTime => Token::LitDateTime(<DateTime>),
        LitDuration => Token::LitDuration(<Duration>),
    }
}

//=============================================================================
// Macros
//=============================================================================

#[inline] Sep<T, S>:         Vec<T> = <v:(<T> S)*> <e:T?> => v.into_iter().chain(e).collect();
#[inline] SepNonEmpty<T, S>: Vec<T> = <e:T> <v:(S <T>)*> => vec![e].into_iter().chain(v).collect();
#[inline] SepMulti<T, S>:    Vec<T> = <e:T> <v:(S <T>)+> => vec![e].into_iter().chain(v).collect();
#[inline] SepTrailing<T, S>: Vec<T> = { <T> S => vec![<>], SepMulti<T, S> };
#[inline] Vec<T>:            Vec<T> = Sep<T, ",">;
#[inline] VecNonEmpty<T>:    Vec<T> = SepNonEmpty<T, ",">;
#[inline] VecTrailing<T>:    Vec<T> = SepTrailing<T, ",">;
#[inline] VecMulti<T>:       Vec<T> = SepMulti<T, ",">;
#[inline] Semi<T>:           Vec<T> = Sep<T, ";">;
#[inline] Single<T>:         Vec<T> = T => vec![<>];
#[inline] Box<T>:            Box<T> = T => Box::new(<>);
#[inline] Err:               ()     = ! => diags.intern(Diagnostic::from(<>, file));
#[inline] Scope<T>:          T      = Indent <T> Dedent;
#[inline] Paren<T>:          T      = "(" <T> ")";
#[inline] Angle<T>:          T      = "<" <T> ">";
#[inline] Bar<T>:            T      = "|" <T> "|";
#[inline] Brace<T>:          T      = "{" <T> "}";
#[inline] Brack<T>:          T      = "[" <T> "]";
#[inline] ParenSep<T, S>:    Vec<T> = { "()" => Vec::new(), Paren<Sep<T, S>> };
#[inline] BrackSep<T, S>:    Vec<T> = { "[]" => Vec::new(), Brack<Sep<T, S>> };
#[inline] AngleSep<T, S>:    Vec<T> = { "<>" => Vec::new(), Angle<Sep<T, S>> };
#[inline] BraceSep<T, S>:    Vec<T> = { "{}" => Vec::new(), Brace<Sep<T, S>> };
#[inline] BarSep<T, S>:      Vec<T> = { "||" => Vec::new(), Bar<Sep<T, S>> };
#[inline] ParenPair:             () = { "()" => () , "(" ")" => () };
#[inline] BrackPair:             () = { "[]" => () , "[" "]" => () };
#[inline] AnglePair:             () = { "<>" => () , "<" ">" => () };
#[inline] BracePair:             () = { "{}" => () , "{" "}" => () };
#[inline] BarPair:               () = { "||" => () , "|" "|" => () };
#[inline] ParenVec<T>:       Vec<T> = ParenSep<T, ",">;
#[inline] BrackVec<T>:       Vec<T> = BrackSep<T, ",">;
#[inline] AngleVec<T>:       Vec<T> = AngleSep<T, ",">;
#[inline] BraceVec<T>:       Vec<T> = BraceSep<T, ",">;
#[inline] BarVec<T>:         Vec<T> = BarSep<T, ",">;
#[inline] Swap<A, B>:        (B, A) = <a:A> <b:B> => (b, a);
#[inline] Spanned<T>: Spanned<T>    = @L T @R => Spanned::new(file, <>);
#[inline] Bool<T>:           bool   = T? => <>.is_some();

//=============================================================================
// Misc
//=============================================================================

#[inline] Field<T>: Field<T> = Spanned<(<Name> ":" <T>)>         => Field::from(<>);
#[inline] Variant:  Variant  = Spanned<(<Name> <Paren<Type0>?>)> => Variant::from(<>);
#[inline] Port:     Port     = Spanned<(<Name> <Paren<Type0>>)>  => Port::from(<>);
#[inline] Case:     Case     = Spanned<(<Pat0> "=>" <Expr0>)>    => Case::from(<>);
#[inline] Name:     Name     = Spanned<NameId>                   => Name::from(<>);
#[inline] Path:     Path     = Spanned<PathId>                   => Path::from(<>);
#[inline] Index:    Index    = Spanned<LitUsize>                 => Index::from(<>);
#[inline] LitUsize: usize    = LitI32                            => <> as usize;

#[inline] PathId: PathId = <root:PathRoot> <tail:("::" <Name>)*> => {
    tail.into_iter().fold(root, |a, x| paths.intern_child(a, x))
};

#[inline] PathRoot: PathId = {
    Name                 => paths.intern_orphan(<>),
    "crate" "::" <Name>  => paths.intern_child(paths.root, <>),
};

//-----------------------------------------------------------------------------
// Operators
//-----------------------------------------------------------------------------

BinaryInfixLeftAssociative<Op, Next>: ExprKind = {
    Expr<BinaryInfixLeftAssociative<Op, Next>> Op Expr<Next> => ExprKind::BinOp(<>),
    Next,
};

BinaryInfixRightAssociative<Op, Next>: ExprKind = {
    Expr<Next> Op Expr<BinaryInfixLeftAssociative<Op, Next>> => ExprKind::BinOp(<>),
    Next,
};

BinaryInfixNonAssociative<Op, Next>: ExprKind = {
    Expr<Next> Op Expr<Next> => ExprKind::BinOp(<>),
    Next,
};

UnaryPostfix<Op, Next>: ExprKind = {
    <e:Expr<UnaryPostfix<Op, Next>>> <op:Op> => ExprKind::UnOp(op, e),
    Next,
};

UnaryPrefix<Op, Next>: ExprKind = {
    <op:Op> <e:Expr<UnaryPrefix<Op, Next>>> => ExprKind::UnOp(op, e),
    Next,
};

//=============================================================================
// Non-Terminals
//=============================================================================

pub(crate) Module = Item*;

//=============================================================================
// Meta Attributes
//=============================================================================

Meta: Meta = Spanned<("@" <Brace<Vec<Attr>>>)> => Meta::from(<>);

Attr: Attr = Spanned<AttrKind> => Attr::from(<>);

AttrKind: AttrKind = {
    Name Paren<LitKind> => AttrKind::NameValue(<>),
    Name                => AttrKind::Name(<>),
};

//=============================================================================
// Items
//=============================================================================

#[inline] Params = ParenVec<Param>;
#[inline] Args   = ParenVec<Expr1>;

Param: Param = Spanned<(<Pat1> <(":" <Type0>)?>)> => Param::from(<>);

Interface: Interface = Spanned<InterfaceKind> => Interface::from(<>);

InterfaceKind: InterfaceKind = {
    ParenVec<Port> => InterfaceKind::Tagged(<>),
    Type0          => InterfaceKind::Single(<>),
};

Item: Item = Spanned<(Meta? ItemKind)> => Item::from(<>);

ItemKind: ItemKind = {
    ExternFun           => ItemKind::ExternFun(<>),
    ExternType          => ItemKind::ExternType(<>),
    TypeAlias           => ItemKind::TypeAlias(<>),
    Enum                => ItemKind::Enum(<>),
    Fun                 => ItemKind::Fun(<>),
    Task                => ItemKind::Task(<>),
    Use                 => ItemKind::Use(<>),
    <Assign<Expr0>> ";" => ItemKind::Assign(<>),
    Err                 => ItemKind::Err,
};

TaskItem: TaskItem = Spanned<(Meta? TaskItemKind)> => TaskItem::from(<>);

TaskItemKind: TaskItemKind = {
    Fun       => TaskItemKind::Fun(<>),
    ExternFun => TaskItemKind::ExternFun(<>),
    TypeAlias => TaskItemKind::TypeAlias(<>),
    Use       => TaskItemKind::Use(<>),
    Enum      => TaskItemKind::Enum(<>),
    Stmt      => TaskItemKind::Stmt(<>),
};

ExternTypeItem: ExternTypeItem = Spanned<(Meta? ExternTypeItemKind)> => ExternTypeItem::from(<>);

ExternTypeItemKind: ExternTypeItemKind = {
    FunDecl => ExternTypeItemKind::FunDecl(<>),
};

FunDecl:    FunDecl    = "fun" <Name> <Params> ":" <Type0> ";"                                      => FunDecl::new(<>);
ExternFun:  ExternFun  = "extern" <FunDecl>                                                         => ExternFun::new(<>);
ExternType: ExternType = "extern" "type" <Name> <Params> <Brace<ExternTypeItem*>>                   => ExternType::new(<>);
Fun:        Fun        = "fun" <Name> <Params> <(":" <Type0>)?> <Block>                             => Fun::new(<>);
TypeAlias:  TypeAlias  = "type" <Name> "=" <Type0> ";"                                              => TypeAlias::new(<>);
Enum:       Enum       = "enum" <Name> <Brace<Vec<Variant>>>                                        => Enum::new(<>);
Use:        Use        = "use" <Path> <("as" <Name>)?> ";"                                          => Use::new(<>);
Task:       Task       = "task" <Name> <Params> ":" <Interface> "->" <Interface> <Brace<TaskItem*>> => Task::new(<>);

Assign<Expr>: Assign = <MutKind> <Param> "=" <Expr> => Assign::new(<>);
#[inline] MutKind: MutKind = {
    "val" => MutKind::Immutable,
    "var" => MutKind::Mutable,
};

#[inline] Handler = {
    Brace<VecNonEmpty<Case>>,
    <Single<Case>>
};

//=============================================================================
// Operators
//=============================================================================

#[inline] BinOp<Kind>: BinOp = Spanned<Kind> => BinOp::from(<>);
#[inline] UnOp<Kind>:  UnOp  = Spanned<Kind> => UnOp::from(<>);

Op0: BinOpKind = {
    "|"        => BinOpKind::Pipe,
    "="        => BinOpKind::Mut,
    "in"       => BinOpKind::In,
    "not" "in" => BinOpKind::NotIn,
};

Op1: BinOpKind = {
    ".."       => BinOpKind::RInc,
    "..="      => BinOpKind::RExc,
};

Op2: BinOpKind = {
    "by"   => BinOpKind::By,
    "bor"  => BinOpKind::Bor,
    "band" => BinOpKind::Band,
    "bxor" => BinOpKind::Bxor,
    "xor"  => BinOpKind::Xor,
    "or"   => BinOpKind::Or,
    "and"  => BinOpKind::And,
};

Op3: BinOpKind = {
    "==" => BinOpKind::Equ,
    "!=" => BinOpKind::Neq,
};

Op4: BinOpKind = {
    ">"  => BinOpKind::Gt,
    "<"  => BinOpKind::Lt,
    ">=" => BinOpKind::Geq,
    "<=" => BinOpKind::Leq,
};

Op5: BinOpKind = {
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub,
    "%" => BinOpKind::Mod,
};

Op6: BinOpKind = {
    "*" => BinOpKind::Mul,
    "/" => BinOpKind::Div,
};

Op7: UnOpKind = {
    "not" => UnOpKind::Not,
    "-"   => UnOpKind::Neg,
};

Op8: BinOpKind = {
    "**" => BinOpKind::Pow,
};

//=============================================================================
// Statements
//=============================================================================

#[inline] Stmt: Stmt = Spanned<StmtKind> => Stmt::from(<>);

StmtKind: StmtKind = {
    ";"                 => StmtKind::Empty,
    <Expr0> ";"         => StmtKind::Expr(<>),
    <Assign<Expr0>> ";" => StmtKind::Assign(<>),
};

//=============================================================================
// Expressions
//=============================================================================

#[inline] InternExpr<Kind>: ExprId = Kind => exprs.intern(<>);

#[inline] Expr<Kind>: Expr = Spanned<InternExpr<Kind>> => Expr::from(<>);

#[inline] Expr0 = Expr<ExprKind0>;
#[inline] Expr1 = Expr<ExprKind1>;
#[inline] Expr2 = Expr<ExprKind2>;
#[inline] Expr10 = Expr<ExprKind10>;
#[inline] Expr11 = Expr<ExprKind11>;
#[inline] Expr12 = Expr<ExprKind12>;
#[inline] Expr13 = Expr<ExprKind13>;
#[inline] Expr14 = Expr<ExprKind14>;
#[inline] Expr15 = Expr<ExprKind15>;

Block: Block = Spanned<Brace<(Stmt* Expr0?)>> => Block::from(<>);

ExprKind0:  ExprKind = {
    "on" <Handler>          => ExprKind::On(<>),
    "emit" <Expr1>          => ExprKind::Emit(<>),
    "after" <Expr1> <Block> => ExprKind::After(<>),
    "every" <Expr1> <Block> => ExprKind::Every(<>),
    "log" <Expr1>           => ExprKind::Log(<>),
    "return" <Expr1?>       => ExprKind::Return(<>),
    "break" <Expr1?>        => ExprKind::Break(<>),
    "continue"              => ExprKind::Continue,
    ExprKind1
};
ExprKind1:  ExprKind = {
    "fun" <ParenVec<Param>> ":" <Expr2> => ExprKind::Lambda(<>),
    ExprKind2
};
ExprKind2:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op0>, ExprKind3>;
ExprKind3:  ExprKind =   BinaryInfixNonAssociative<BinOp<Op1>, ExprKind4>;
ExprKind4:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op2>, ExprKind5>;
ExprKind5:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op3>, ExprKind6>;
ExprKind6:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op4>, ExprKind7>;
ExprKind7:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op5>, ExprKind8>;
ExprKind8:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op6>, ExprKind9>;
ExprKind9:  ExprKind =                  UnaryPrefix<UnOp<Op7>, ExprKind10>;
ExprKind10: ExprKind = BinaryInfixRightAssociative<BinOp<Op8>, ExprKind11>;
ExprKind11: ExprKind = {
    <Expr11> "as" <Type2> => ExprKind::Cast(<>),
    ExprKind12,
};
ExprKind12: ExprKind = {
    ExprKind13,
    ExprKind14,
};
ExprKind13: ExprKind = {
    <Expr15> <ParenVec<Expr1>> => ExprKind::Call(<>),
    ExprKind15,
};
ExprKind14: ExprKind = {
    <Expr12> "." <Index>                  => ExprKind::Project(<>),
    <Expr12> "." <Name>                   => ExprKind::Access(<>),
    <Expr12> "." <Name> <ParenVec<Expr1>> => ExprKind::Invoke(<>),
    <Expr12> <BrackVec<Expr1>>            => ExprKind::Select(<>),
};
ExprKind15: ExprKind = {
    Paren<ExprKind0>,
    Block                                            => ExprKind::Block(<>),
    LitKind                                          => ExprKind::Lit(<>),
    Path ("::" <BrackVec<Type0>>)?                   => ExprKind::Path(<>),
    Brack<VecNonEmpty<Expr0>>                        => ExprKind::Array(<>),
    Paren<VecTrailing<Expr0>>                        => ExprKind::Tuple(<>),
    Brace<VecNonEmpty<Field<Expr0>>>                 => ExprKind::Struct(<>),
    "if" <Expr2> <Block> <("else" <Block>)?>         => ExprKind::If(<>),
    "if" <Assign<Expr1>> <Block> <("else" <Block>)?> => ExprKind::IfAssign(<>),
    "match" <Expr1> <Brace<Vec<Case>>>               => ExprKind::Match(<>),
    "loop" <Block>                                   => ExprKind::Loop(<>),
    "for" <Pat0> "in" <Expr1> <Block>                => ExprKind::For(<>),
    "unwrap" <Brack<Path>> <Paren<Expr0>>            => ExprKind::Unwrap(<>),
    "enwrap" <Brack<Path>> <Paren<Expr0>>            => ExprKind::Enwrap(<>),
    "is" <Brack<Path>> <Paren<Expr0>>                => ExprKind::Is(<>),
    Err                                              => ExprKind::Err,
};

//=============================================================================
// Lit
//=============================================================================

LitKind: LitKind = {
    LitBool     => LitKind::Bool(<>),
    LitChar     => LitKind::Char(<>),
    LitI8       => LitKind::I8(<>),
    LitI16      => LitKind::I16(<>),
    LitI32      => LitKind::I32(<>),
    LitI64      => LitKind::I64(<>),
    LitU8       => LitKind::U8(<>),
    LitU16      => LitKind::U16(<>),
    LitU32      => LitKind::U32(<>),
    LitU64      => LitKind::U64(<>),
    LitF32      => LitKind::F32(<>),
    LitF64      => LitKind::F64(<>),
    LitStr      => LitKind::Str(<>),
    LitDateTime => LitKind::DateTime(<>),
    LitDuration => LitKind::Duration(<>),
    "unit"      => LitKind::Unit,
};

//=============================================================================
// Patterns
//=============================================================================

#[inline] InternPat<Kind>: PatId = Kind => pats.intern(<>);

#[inline] Pat<Kind>: Pat = Spanned<InternPat<Kind>> => Pat::from(<>);

#[inline] Pat0 = Pat<PatKind0>;
#[inline] Pat1 = Pat<PatKind1>;
#[inline] Pat2 = Pat<PatKind2>;

PatKind0: PatKind = {
    <Pat0> "or" <Pat1> => PatKind::Or(<>),
    PatKind1
};

PatKind1: PatKind = {
    <Pat1> "by" <Pat2> => PatKind::By(<>),
    PatKind2
};

PatKind2: PatKind = {
    LitKind                      => PatKind::Const(<>),
    Name                         => PatKind::Var(<>),
    Path Paren<Pat0>             => PatKind::Variant(<>),
    Paren<VecTrailing<Pat0>>     => PatKind::Tuple(<>),
    Brace<VecNonEmpty<FieldPat>> => PatKind::Struct(<>),
    "_"                          => PatKind::Ignore,
};

FieldPat: Field<Option<Pat>> = Spanned<(Name (":" <Pat0>)?)> => Field::from(<>);

//=============================================================================
// Types
//=============================================================================

#[inline] InternType<Kind>: TypeId = Kind => types.intern(<>);

#[inline] Type<Kind>: Type = Spanned<InternType<Kind>> => Type::from(<>);

#[inline] Type0 = Type<TypeKind0>;
#[inline] Type1 = Type<TypeKind1>;
#[inline] Type2 = Type<TypeKind2>;

TypeKind0: TypeKind = {
    "fun" <ParenVec<Type0>> ":" <Type0> => TypeKind::Fun(<>),
    "~" <Type0>                         => TypeKind::Stream(<>),
    TypeKind1,
};

TypeKind1: TypeKind = {
    <Type1> "by" <Type2> => TypeKind::By(<>),
    TypeKind2
};

TypeKind2: TypeKind = {
    ScalarKind                        => TypeKind::Scalar(<>),
    Path (BrackVec<Type0>)?           => TypeKind::Path(<>),
    Brace<<Vec<Field<Type0>>>>        => TypeKind::Struct(<>),
    Paren<<VecTrailing<Type0>>>       => TypeKind::Tuple(<>),
    Brack<(<(<Type0> ";")?> <Shape>)> => TypeKind::Array(<>.0, <>.1),
    Err                               => TypeKind::Err,
};

ScalarKind: ScalarKind = {
    "bool" => ScalarKind::Bool,
    "f32"  => ScalarKind::F32,
    "f64"  => ScalarKind::F64,
    "i8"   => ScalarKind::I8,
    "i16"  => ScalarKind::I16,
    "i32"  => ScalarKind::I32,
    "i64"  => ScalarKind::I64,
    "u8"   => ScalarKind::U8,
    "u16"  => ScalarKind::U16,
    "u32"  => ScalarKind::U32,
    "u64"  => ScalarKind::U64,
    "str"  => ScalarKind::Str,
    "unit" => ScalarKind::Unit,
    "char" => ScalarKind::Char,
    "size" => ScalarKind::Size,
};

//=============================================================================
// Shape and Dimensions
//=============================================================================

#[inline] Shape: Shape = Spanned<Vec<Dim<DimKind0>>> => Shape::from(<>);

#[inline] Dim<DimKind>: Dim = Spanned<DimKind> => Dim::from(<>);

#[inline] Dim0 = Dim<DimKind0>;
#[inline] Dim1 = Dim<DimKind1>;
#[inline] Dim2 = Dim<DimKind2>;

DimKind0: DimKind = {
    Box<Dim0> DimOp0 Box<Dim1> => DimKind::Op(<>),
    DimKind1,
};

DimKind1: DimKind = {
    Box<Dim1> DimOp1 Box<Dim2> => DimKind::Op(<>),
    DimKind2,
};

DimKind2: DimKind = {
    LitI32 => DimKind::Val(<>),
    // "?"    => DimKind::Var(0),
};

#[inline] DimOp<Kind>: DimOp = Spanned<Kind> => DimOp::from(<>);
#[inline] DimOp0 = DimOp<DimOpKind0>;
#[inline] DimOp1 = DimOp<DimOpKind1>;

DimOpKind0: DimOpKind = {
    "+" => DimOpKind::Add,
    "-" => DimOpKind::Sub,
};

DimOpKind1: DimOpKind = {
    "*" => DimOpKind::Mul,
    "/" => DimOpKind::Div,
};
