---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_mlir_fail_todo/pipe.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    pub fn foo(x_0: i32) -> i32 {
        let x_1: i32 = val!(x_0) + val!(x_0);
        val!(x_1)
    }
    pub fn bar(x_2: i32) -> i32 {
        let x_3: Box<dyn ValueFn(i32) -> i32> = Box::new(foo) as Box<dyn ValueFn(i32) -> i32>;
        let x_4: Box<dyn ValueFn(i32) -> i32> = Box::new(foo) as Box<dyn ValueFn(i32) -> i32>;
        let x_5: i32 = val!(x_4)(val!(x_2));
        let x_6: i32 = val!(x_3)(val!(x_5));
        val!(x_6)
    }
    #[codegen::rewrite(on_event = "Baz_on_event", on_start = "Baz_on_start")]
    mod Baz_mod {
        struct Baz {}
        #[codegen::rewrite]
        pub enum Baz_IInterface {
            Baz_IInterface___(Struct3keyi325valuei32End),
        }
        #[codegen::rewrite]
        pub enum Baz_OInterface {
            Baz_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Baz_mod::Baz {
        pub fn Baz_on_event(&mut self, x_A: Baz_IInterface) -> Unit {
            let x_7: Struct3keyi325valuei32End = unwrap!(Baz_IInterface___, val!(x_A));
            let x_8: i32 = access!(val!(x_7), value);
            let x_9: i32 = access!(val!(x_7), key);
            let x_B: Struct3keyi325valuei32End = new!(Struct3keyi325valuei32End {
                value: val!(x_8),
                key: val!(x_9)
            });
            let x_C: Baz_OInterface = enwrap!(Baz_OInterface___, val!(x_B));
            let x_D: Unit = self.emit(val!(x_C));
            val!(x_D)
        }
        pub fn Baz_on_start(&mut self) -> Unit {
            let x_F: Unit = ();
            val!(x_F)
        }
    }
    pub fn qux(
        s_0: Stream<<Struct3keyi325valuei32End as Convert>::T>,
    ) -> Stream<<Struct3keyi325valuei32End as Convert>::T> {
        let x_G: Box<
            dyn ValueFn() -> Box<
                dyn ValueFn(
                    Stream<<Struct3keyi325valuei32End as Convert>::T>,
                ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
            >,
        > = Box::new(Baz)
            as Box<
                dyn ValueFn() -> Box<
                    dyn ValueFn(
                        Stream<<Struct3keyi325valuei32End as Convert>::T>,
                    )
                        -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
                >,
            >;
        let x_H: Box<
            dyn ValueFn(
                Stream<<Struct3keyi325valuei32End as Convert>::T>,
            ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
        > = val!(x_G)();
        let x_I: Box<
            dyn ValueFn() -> Box<
                dyn ValueFn(
                    Stream<<Struct3keyi325valuei32End as Convert>::T>,
                ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
            >,
        > = Box::new(Baz)
            as Box<
                dyn ValueFn() -> Box<
                    dyn ValueFn(
                        Stream<<Struct3keyi325valuei32End as Convert>::T>,
                    )
                        -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
                >,
            >;
        let x_J: Box<
            dyn ValueFn(
                Stream<<Struct3keyi325valuei32End as Convert>::T>,
            ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
        > = val!(x_I)();
        let x_K: Stream<<Struct3keyi325valuei32End as Convert>::T> = val!(x_J)(val!(s_0));
        let x_L: Stream<<Struct3keyi325valuei32End as Convert>::T> = val!(x_H)(val!(x_K));
        val!(x_L)
    }
    #[codegen::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


