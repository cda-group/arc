---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_pass/binops.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    pub fn main() -> Unit {
        let x_0: bool = true;
        let x_1: i8 = 127i8;
        let x_2: i16 = 32767i16;
        let x_3: i32 = 2147483647i32;
        let x_4: i64 = 9223372036854775807i64;
        let x_5: u8 = 255u8;
        let x_6: u16 = 65535u16;
        let x_7: u32 = 4294967295u32;
        let x_8: u64 = 18446744073709551615u64;
        let x_9: f32 = 340282350000000000000000000000000000000f32;
        let x_A : f64 = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64 ;
        let x_B: i8 = 126i8;
        let x_C: i16 = 32766i16;
        let x_D: i32 = 2147483646i32;
        let x_E: i64 = 9223372036854775806i64;
        let x_F: u8 = 254u8;
        let x_G: u16 = 65534u16;
        let x_H: u32 = 4294967294u32;
        let x_I: u64 = 18446744073709551614u64;
        let x_J: f32 = 34028235000000000000000000000000000000f32;
        let x_K : f64 = 179769313486231550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64 ;
        let x_L: i8 = val!(x_1) + val!(x_1);
        let x_M: i16 = val!(x_2) + val!(x_2);
        let x_N: i32 = val!(x_3) + val!(x_3);
        let x_O: i64 = val!(x_4) + val!(x_4);
        let x_P: u8 = val!(x_5) + val!(x_5);
        let x_Q: u16 = val!(x_6) + val!(x_6);
        let x_R: u32 = val!(x_7) + val!(x_7);
        let x_S: u64 = val!(x_8) + val!(x_8);
        let x_T: f32 = val!(x_9) + val!(x_9);
        let x_U: f64 = val!(x_A) + val!(x_A);
        let x_V: i8 = val!(x_1) - val!(x_1);
        let x_W: i16 = val!(x_2) - val!(x_2);
        let x_X: i32 = val!(x_3) - val!(x_3);
        let x_Y: i64 = val!(x_4) - val!(x_4);
        let x_Z: u8 = val!(x_5) - val!(x_5);
        let x_a: u16 = val!(x_6) - val!(x_6);
        let x_b: u32 = val!(x_7) - val!(x_7);
        let x_c: u64 = val!(x_8) - val!(x_8);
        let x_d: f32 = val!(x_9) - val!(x_9);
        let x_e: f64 = val!(x_A) - val!(x_A);
        let x_f: i8 = val!(x_1) * val!(x_1);
        let x_g: i16 = val!(x_2) * val!(x_2);
        let x_h: i32 = val!(x_3) * val!(x_3);
        let x_i: i64 = val!(x_4) * val!(x_4);
        let x_j: u8 = val!(x_5) * val!(x_5);
        let x_k: u16 = val!(x_6) * val!(x_6);
        let x_l: u32 = val!(x_7) * val!(x_7);
        let x_m: u64 = val!(x_8) * val!(x_8);
        let x_n: f32 = val!(x_9) * val!(x_9);
        let x_o: f64 = val!(x_A) * val!(x_A);
        let x_p: i8 = val!(x_1) / val!(x_1);
        let x_q: i16 = val!(x_2) / val!(x_2);
        let x_r: i32 = val!(x_3) / val!(x_3);
        let x_s: i64 = val!(x_4) / val!(x_4);
        let x_t: u8 = val!(x_5) / val!(x_5);
        let x_u: u16 = val!(x_6) / val!(x_6);
        let x_v: u32 = val!(x_7) / val!(x_7);
        let x_w: u64 = val!(x_8) / val!(x_8);
        let x_x: f32 = val!(x_9) / val!(x_9);
        let x_y: f64 = val!(x_A) / val!(x_A);
        let x_z: i8 = val!(x_1) % val!(x_1);
        let x__0: i16 = val!(x_2) % val!(x_2);
        let x__1: i32 = val!(x_3) % val!(x_3);
        let x__2: i64 = val!(x_4) % val!(x_4);
        let x__3: u8 = val!(x_5) % val!(x_5);
        let x__4: u16 = val!(x_6) % val!(x_6);
        let x__5: u32 = val!(x_7) % val!(x_7);
        let x__6: u64 = val!(x_8) % val!(x_8);
        let x__7: f32 = val!(x_9) % val!(x_9);
        let x__8: f64 = val!(x_A) % val!(x_A);
        let x__9: bool = val!(x_1) <= val!(x_1);
        let x__A: bool = val!(x_2) <= val!(x_2);
        let x__B: bool = val!(x_3) <= val!(x_3);
        let x__C: bool = val!(x_4) <= val!(x_4);
        let x__D: bool = val!(x_5) <= val!(x_5);
        let x__E: bool = val!(x_6) <= val!(x_6);
        let x__F: bool = val!(x_7) <= val!(x_7);
        let x__G: bool = val!(x_8) <= val!(x_8);
        let x__H: bool = val!(x_9) <= val!(x_9);
        let x__I: bool = val!(x_A) <= val!(x_A);
        let x__J: bool = val!(x_1) < val!(x_1);
        let x__K: bool = val!(x_2) < val!(x_2);
        let x__L: bool = val!(x_3) < val!(x_3);
        let x__M: bool = val!(x_4) < val!(x_4);
        let x__N: bool = val!(x_5) < val!(x_5);
        let x__O: bool = val!(x_6) < val!(x_6);
        let x__P: bool = val!(x_7) < val!(x_7);
        let x__Q: bool = val!(x_8) < val!(x_8);
        let x__R: bool = val!(x_9) < val!(x_9);
        let x__S: bool = val!(x_A) < val!(x_A);
        let x__T: bool = val!(x_1) > val!(x_1);
        let x__U: bool = val!(x_2) > val!(x_2);
        let x__V: bool = val!(x_3) > val!(x_3);
        let x__W: bool = val!(x_4) > val!(x_4);
        let x__X: bool = val!(x_5) > val!(x_5);
        let x__Y: bool = val!(x_6) > val!(x_6);
        let x__Z: bool = val!(x_7) > val!(x_7);
        let x__a: bool = val!(x_8) > val!(x_8);
        let x__b: bool = val!(x_9) > val!(x_9);
        let x__c: bool = val!(x_A) > val!(x_A);
        let x__d: bool = val!(x_1) >= val!(x_1);
        let x__e: bool = val!(x_2) >= val!(x_2);
        let x__f: bool = val!(x_3) >= val!(x_3);
        let x__g: bool = val!(x_4) >= val!(x_4);
        let x__h: bool = val!(x_5) >= val!(x_5);
        let x__i: bool = val!(x_6) >= val!(x_6);
        let x__j: bool = val!(x_7) >= val!(x_7);
        let x__k: bool = val!(x_8) >= val!(x_8);
        let x__l: bool = val!(x_9) >= val!(x_9);
        let x__m: bool = val!(x_A) >= val!(x_A);
        let x__n: bool = val!(x_0) == val!(x_0);
        let x__o: bool = val!(x_1) == val!(x_1);
        let x__p: bool = val!(x_2) == val!(x_2);
        let x__q: bool = val!(x_3) == val!(x_3);
        let x__r: bool = val!(x_4) == val!(x_4);
        let x__s: bool = val!(x_5) == val!(x_5);
        let x__t: bool = val!(x_6) == val!(x_6);
        let x__u: bool = val!(x_7) == val!(x_7);
        let x__v: bool = val!(x_8) == val!(x_8);
        let x__w: bool = val!(x_9) == val!(x_9);
        let x__x: bool = val!(x_A) == val!(x_A);
        let x__y: bool = val!(x_0) != val!(x_0);
        let x__z: bool = val!(x_1) != val!(x_1);
        let x___0: bool = val!(x_2) != val!(x_2);
        let x___1: bool = val!(x_3) != val!(x_3);
        let x___2: bool = val!(x_4) != val!(x_4);
        let x___3: bool = val!(x_5) != val!(x_5);
        let x___4: bool = val!(x_6) != val!(x_6);
        let x___5: bool = val!(x_7) != val!(x_7);
        let x___6: bool = val!(x_8) != val!(x_8);
        let x___7: bool = val!(x_9) != val!(x_9);
        let x___8: bool = val!(x_A) != val!(x_A);
        let x___9: bool = val!(x_0) && val!(x_0);
        let x___A: bool = val!(x_0) || val!(x_0);
        let x___B: bool = val!(x_0) ^ val!(x_0);
        let x___C: i8 = val!(x_1) & val!(x_1);
        let x___D: i16 = val!(x_2) & val!(x_2);
        let x___E: i32 = val!(x_3) & val!(x_3);
        let x___F: i64 = val!(x_4) & val!(x_4);
        let x___G: u8 = val!(x_5) & val!(x_5);
        let x___H: u16 = val!(x_6) & val!(x_6);
        let x___I: u32 = val!(x_7) & val!(x_7);
        let x___J: u64 = val!(x_8) & val!(x_8);
        let x___K: i8 = val!(x_1) | val!(x_1);
        let x___L: i16 = val!(x_2) | val!(x_2);
        let x___M: i32 = val!(x_3) | val!(x_3);
        let x___N: i64 = val!(x_4) | val!(x_4);
        let x___O: u8 = val!(x_5) | val!(x_5);
        let x___P: u16 = val!(x_6) | val!(x_6);
        let x___Q: u32 = val!(x_7) | val!(x_7);
        let x___R: u64 = val!(x_8) | val!(x_8);
        let x___S: i8 = val!(x_1) ^ val!(x_1);
        let x___T: i16 = val!(x_2) ^ val!(x_2);
        let x___U: i32 = val!(x_3) ^ val!(x_3);
        let x___V: i64 = val!(x_4) ^ val!(x_4);
        let x___W: u8 = val!(x_5) ^ val!(x_5);
        let x___X: u16 = val!(x_6) ^ val!(x_6);
        let x___Y: u32 = val!(x_7) ^ val!(x_7);
        let x___Z: u64 = val!(x_8) ^ val!(x_8);
        let x___a: f32 = val!(x_9).powf(val!(x_J));
        let x___b: f64 = val!(x_A).powf(val!(x_K));
        let x___c: Unit = ();
        val!(x___c)
    }
}
pub use arc_script_output::*;


