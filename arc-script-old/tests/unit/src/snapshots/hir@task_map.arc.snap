---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_map.arc

---
task Map(f_0: fun(i32): i32): ~{ key: i32, value: i32 } -> ~{ key: i32, value: i32 } {
    enum IInterface {
        __({ key: i32, value: i32 })
    }
    enum OInterface {
        __({ key: i32, value: i32 })
    }
    fun on_start(): unit {
        val x_9: unit = unit;
        x_9
    }
    crate::Map::on_start();
    fun on_event(x_3: crate::Map::IInterface): unit {
        val x_0: { key: i32, value: i32 } = unwrap[crate::Map::IInterface::__](x_3);
        val x_1: i32 = x_0.value;
        val x_2: i32 = x_0.key;
        val x_4: i32 = f_0(x_1);
        val x_5: { key: i32, value: i32 } = { value: x_4, key: x_2 };
        val x_6: crate::Map::OInterface = enwrap[crate::Map::OInterface::__](x_5);
        val x_7: unit = emit x_6;
        x_7
    }
    on event => crate::Map::on_event(event)
}
fun x_B(x_C: i32): i32 {
    val x_D: i32 = 1;
    val x_E: i32 = x_C + x_D;
    x_E
}
fun main(input_0: ~{ key: i32, value: i32 }): ~{ key: i32, value: i32 } {
    val x_A: fun(fun(i32): i32): fun(~{ key: i32, value: i32 }): ~{ key: i32, value: i32 } = crate::Map;
    val x_F: fun(i32): i32 = crate::x_B;
    val x_G: fun(~{ key: i32, value: i32 }): ~{ key: i32, value: i32 } = x_A(x_F);
    val x_H: ~{ key: i32, value: i32 } = x_G(input_0);
    x_H
}

