---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/fib.arc

---
module @toplevel {
    func @crate_fib(%n_0: si32) -> si32 {
        %x_0 = arc.constant 2 : si32
        %x_1 = arc.cmpi gt, %n_0, %x_0 : si32
        %x_C = "arc.if"(%x_1) ({
            %x_2 = constant @crate_fib : (si32) -> si32
            %x_3 = arc.constant 1 : si32
            %x_4 = arc.subi %n_0, %x_3 : si32
            %x_5 = call_indirect %x_2(%x_4) : (si32) -> si32
            %x_6 = constant @crate_fib : (si32) -> si32
            %x_7 = arc.constant 2 : si32
            %x_8 = arc.subi %n_0, %x_7 : si32
            %x_9 = call_indirect %x_6(%x_8) : (si32) -> si32
            %x_A = arc.addi %x_5, %x_9 : si32
            "arc.block.result"(%x_A) : (si32) -> ()
        },{
            %x_B = arc.constant 0 : si32
            "arc.block.result"(%x_B) : (si32) -> ()
        }) : (i1) -> si32
        return %x_C : si32
    }

    func @crate_test() -> si32 {
        %x_D = constant @crate_fib : (si32) -> si32
        %x_E = arc.constant 5 : si32
        %x_F = call_indirect %x_D(%x_E) : (si32) -> si32
        return %x_F : si32
    }
}

