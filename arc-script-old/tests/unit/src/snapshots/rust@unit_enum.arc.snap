---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_pass/unit_enum.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    #[codegen::rewrite]
    pub enum Foo {
        Foo_Bar(Unit),
    }
    pub fn x_5() -> Unit {
        let x_4: Unit = ();
        val!(x_4)
    }
    pub fn test() -> Unit {
        let x_0: Unit = ();
        let x_1: Foo = enwrap!(Foo_Bar, val!(x_0));
        let x_2: bool = is!(Foo_Bar, val!(x_1));
        let x_8: Unit = if val!(x_2) {
            let x_3: Unit = unwrap!(Foo_Bar, val!(x_1));
            val!(x_3)
        } else {
            let x_6: Box<dyn ValueFn() -> Unit> = Box::new(x_5) as Box<dyn ValueFn() -> Unit>;
            let x_7: Unit = val!(x_6)();
            val!(x_7)
        };
        val!(x_8)
    }
}
pub use arc_script_output::*;


