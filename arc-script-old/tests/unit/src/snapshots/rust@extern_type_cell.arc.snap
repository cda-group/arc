---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_type_cell.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::Cell;
    use super::*;
    use arc_script::arcorn;
    pub fn main() -> () {
        let x_0: Box<dyn arcorn::ArcornFn(i32) -> Cell> =
            Box::new(Cell::new) as Box<dyn arcorn::ArcornFn(i32) -> Cell>;
        let x_1: i32 = 5i32;
        let x_2: Cell = (x_0.clone())((x_1.clone()));
        let x_3: i32 = (x_2.clone()).get();
        let x_4: i32 = (x_3.clone()) + (x_3.clone());
        let x_5: () = (x_2.clone()).set((x_4.clone()));
        let x_6: () = ();
        (x_6.clone())
    }
}
pub use arc_script_output::*;


