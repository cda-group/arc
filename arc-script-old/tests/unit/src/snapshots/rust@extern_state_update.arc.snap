---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_state_update.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::Cell;
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Stateful_on_event", on_start = "Stateful_on_start")]
    mod Stateful_mod {
        struct Stateful {
            init_0: i32,
            state_0: Cell,
        }
        #[arcorn::rewrite]
        pub enum Stateful_IInterface {
            Stateful_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Stateful_OInterface {
            Stateful_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Stateful_mod::Stateful {
        pub fn Stateful_on_event(&mut self, x_6: Stateful_IInterface) -> () {
            let x_3: Struct3keyi325valuei32End =
                arcorn::unwrap!(Stateful_IInterface___, (x_6.clone()));
            let x_4: i32 = (x_3.clone()).value;
            let x_5: i32 = (x_3.clone()).key;
            let x_7: Box<dyn arcorn::ArcornFn(i32) -> i32> = self.update;
            let x_8: i32 = ((self.state_0).clone()).get();
            let x_9: i32 = (x_7.clone())((x_8.clone()));
            let x_A: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                value: (x_9.clone()),
                key: (x_5.clone()),
            };
            let x_B: Stateful_OInterface = arcorn::enwrap!(Stateful_OInterface___, (x_A.clone()));
            let x_C: () = self.emit((x_B.clone()));
            (x_C.clone())
        }
        pub fn Stateful_on_start(&mut self) -> () {
            let x_0: Box<dyn arcorn::ArcornFn(i32) -> Cell> =
                Box::new(Cell::new) as Box<dyn arcorn::ArcornFn(i32) -> Cell>;
            let x_1: Cell = (x_0.clone())(((self.init_0).clone()));
            let x_2: () = (self.state_0).initialise((x_1.clone()));
            let x_E: () = ();
            (x_E.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


