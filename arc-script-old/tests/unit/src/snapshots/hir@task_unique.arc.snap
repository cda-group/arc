---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_unique.arc

---
extern type Set() {
    extern fun contains(x: i32): bool;, 
    extern fun add(x: i32): unit;
}
task Unique(): ~{ key: i32, value: i32 } -> ~{ key: i32, value: i32 } {
    enum IInterface {
        __({ key: i32, value: i32 })
    }
    enum OInterface {
        __({ key: i32, value: i32 })
    }
    val set_0: crate::Set = uninitialised;
    fun on_start(): unit {
        val x_0: fun(): crate::Set = crate::Set;
        val x_1: crate::Set = x_0();
        val x_2: unit = initialise[set_0](x_1);
        val x_G: unit = unit;
        x_G
    }
    crate::Unique::on_start();
    fun on_event(x_6: crate::Unique::IInterface): unit {
        val x_3: { key: i32, value: i32 } = unwrap[crate::Unique::IInterface::__](x_6);
        val x_4: i32 = x_3.value;
        val x_5: i32 = x_3.key;
        val x_7: bool = set_0.contains(x_4);
        val x_8: bool = not x_7;
        val x_E: unit = if x_8 {
            val x_9: unit = set_0.add(x_4);
            val x_A: { key: i32, value: i32 } = { value: x_4, key: x_5 };
            val x_B: crate::Unique::OInterface = enwrap[crate::Unique::OInterface::__](x_A);
            val x_C: unit = emit x_B;
            x_C
        } else {
            val x_D: unit = unit;
            x_D
        };
        x_E
    }
    on event => crate::Unique::on_event(event)
}

