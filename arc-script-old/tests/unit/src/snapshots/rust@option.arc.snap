---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_pass/option.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    #[codegen::rewrite]
    pub enum Opt {
        Opt_Some(i32),
        Opt_None(Unit),
    }
    pub fn x_6() -> Unit {
        let x_5: Unit = ();
        val!(x_5)
    }
    pub fn main() -> Unit {
        let x_0: i32 = 3i32;
        let x_1: Opt = enwrap!(Opt_Some, val!(x_0));
        let x_2: bool = is!(Opt_Some, val!(x_1));
        let x_9: Unit = if val!(x_2) {
            let x_3: i32 = unwrap!(Opt_Some, val!(x_1));
            let x_4: Unit = ();
            val!(x_4)
        } else {
            let x_7: Box<dyn ValueFn() -> Unit> = Box::new(x_6) as Box<dyn ValueFn() -> Unit>;
            let x_8: Unit = val!(x_7)();
            val!(x_8)
        };
        val!(x_9)
    }
}
pub use arc_script_output::*;


