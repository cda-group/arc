---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_mlir_fail_todo/stream_typing.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    pub fn test0(
        x_0: Stream<<Struct3keyi325valuei32End as Convert>::T>,
    ) -> Stream<<Struct3keyi325valuei32End as Convert>::T> {
        let x_1: Box<
            dyn ValueFn(
                Stream<<Struct3keyi325valuei32End as Convert>::T>,
            ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
        > = Box::new(test1)
            as Box<
                dyn ValueFn(
                    Stream<<Struct3keyi325valuei32End as Convert>::T>,
                ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
            >;
        let x_2: Stream<<Struct3keyi325valuei32End as Convert>::T> = val!(x_1)(val!(x_0));
        val!(x_2)
    }
    pub fn test1(
        x_3: Stream<<Struct3keyi325valuei32End as Convert>::T>,
    ) -> Stream<<Struct3keyi325valuei32End as Convert>::T> {
        val!(x_3)
    }
    #[codegen::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


