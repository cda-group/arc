---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_fun.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Adder_on_event", on_start = "Adder_on_start")]
    mod Adder_mod {
        struct Adder {}
        #[arcorn::rewrite]
        pub enum Adder_IInterface {
            Adder_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Adder_OInterface {
            Adder_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Adder_mod::Adder {
        pub fn Adder_on_event(&mut self, x_3: Adder_IInterface) -> () {
            let x_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(Adder_IInterface___, (x_3.clone()));
            let x_1: i32 = (x_0.clone()).value;
            let x_2: i32 = (x_0.clone()).key;
            let x_4: Box<dyn arcorn::ArcornFn(i32, i32) -> i32> = self.addition;
            let x_5: i32 = (x_4.clone())((x_1.clone()), (x_1.clone()));
            let x_6: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                value: (x_5.clone()),
                key: (x_2.clone()),
            };
            let x_7: Adder_OInterface = arcorn::enwrap!(Adder_OInterface___, (x_6.clone()));
            let x_8: () = self.emit((x_7.clone()));
            (x_8.clone())
        }
        pub fn Adder_on_start(&mut self) -> () {
            let x_A: () = ();
            (x_A.clone())
        }
    }
    pub fn pipe(
        s_0: arcorn::Stream<Struct3keyi325valuei32End>,
    ) -> arcorn::Stream<Struct3keyi325valuei32End> {
        let x_B: Box<dyn arcorn::ArcornFn(i32) -> i32> =
            Box::new(increment) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
        let x_C: i32 = 1i32;
        let x_D: i32 = (x_B.clone())((x_C.clone()));
        let x_E: i32 = 2i32;
        let x_F: bool = (x_D.clone()) == (x_E.clone());
        let x_M: arcorn::Stream<Struct3keyi325valuei32End> = if (x_F.clone()) {
            let x_G: Box<
                dyn arcorn::ArcornFn() -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<Struct3keyi325valuei32End>,
                    )
                        -> arcorn::Stream<Struct3keyi325valuei32End>,
                >,
            > = Box::new(Adder)
                as Box<
                    dyn arcorn::ArcornFn() -> Box<
                        dyn arcorn::ArcornFn(
                            arcorn::Stream<Struct3keyi325valuei32End>,
                        )
                            -> arcorn::Stream<Struct3keyi325valuei32End>,
                    >,
                >;
            let x_H: Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            > = (x_G.clone())();
            let x_I: arcorn::Stream<Struct3keyi325valuei32End> = (x_H.clone())((s_0.clone()));
            (x_I.clone())
        } else {
            let x_J: Box<
                dyn arcorn::ArcornFn() -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<Struct3keyi325valuei32End>,
                    )
                        -> arcorn::Stream<Struct3keyi325valuei32End>,
                >,
            > = Box::new(Adder)
                as Box<
                    dyn arcorn::ArcornFn() -> Box<
                        dyn arcorn::ArcornFn(
                            arcorn::Stream<Struct3keyi325valuei32End>,
                        )
                            -> arcorn::Stream<Struct3keyi325valuei32End>,
                    >,
                >;
            let x_K: Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            > = (x_J.clone())();
            let x_L: arcorn::Stream<Struct3keyi325valuei32End> = (x_K.clone())((s_0.clone()));
            (x_L.clone())
        };
        (x_M.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


