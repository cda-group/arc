---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_window.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::Cell;
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(
        on_event = "TumblingWindowSum_on_event",
        on_start = "TumblingWindowSum_on_start"
    )]
    mod TumblingWindowSum_mod {
        struct TumblingWindowSum {
            agg_0: Cell,
        }
        #[arcorn::rewrite]
        pub enum TumblingWindowSum_IInterface {
            TumblingWindowSum_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum TumblingWindowSum_OInterface {
            TumblingWindowSum_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl TumblingWindowSum_mod::TumblingWindowSum {
        pub fn TumblingWindowSum_on_event(&mut self, x_H: TumblingWindowSum_IInterface) -> () {
            let x_E: Struct3keyi325valuei32End =
                arcorn::unwrap!(TumblingWindowSum_IInterface___, (x_H.clone()));
            let x_F: i32 = (x_E.clone()).value;
            let x_G: i32 = (x_E.clone()).key;
            let x_I: i32 = ((self.agg_0).clone()).get();
            let x_J: i32 = (x_I.clone()) + (x_F.clone());
            let x_K: () = ((self.agg_0).clone()).set((x_J.clone()));
            (x_K.clone())
        }
        pub fn TumblingWindowSum_on_start(&mut self) -> () {
            let x_0: Box<dyn arcorn::ArcornFn(i32) -> Cell> =
                Box::new(Cell::new) as Box<dyn arcorn::ArcornFn(i32) -> Cell>;
            let x_1: i32 = 0i32;
            let x_2: Cell = (x_0.clone())((x_1.clone()));
            let x_3: () = (self.agg_0).initialise((x_2.clone()));
            let x_4: u64 = 60u64;
            let x_D: () = self.every((x_4.clone()), move || {
                let x_5: i32 = ((self.agg_0).clone()).get();
                let x_6: i32 = 0i32;
                let x_7: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                    value: (x_5.clone()),
                    key: (x_6.clone()),
                };
                let x_8: TumblingWindowSum_OInterface =
                    arcorn::enwrap!(TumblingWindowSum_OInterface___, (x_7.clone()));
                let x_9: () = self.emit((x_8.clone()));
                let x_A: i32 = 0i32;
                let x_B: () = ((self.agg_0).clone()).set((x_A.clone()));
                let x_C: () = ();
                (x_C.clone())
            });
            let x_M: () = ();
            (x_M.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


