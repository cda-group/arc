---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/if_let.arc

---
module @toplevel {
    func @crate_x_H(%x_1: si32) -> si32 {
        %x_F = arc.constant 2 : si32
        %x_G = arc.addi %x_1, %x_F : si32
        return %x_G : si32
    }

    func @crate_test() -> si32 {
        %x_0 = arc.constant 3 : si32
        %x_1 = arc.constant 5 : si32
        %x_2 = arc.constant 3 : si32
        %x_3 = "arc.make_tuple"(%x_2, %x_0) : (si32, si32) -> tuple<si32, si32>
        %x_4 = arc.constant 1 : si32
        %x_5 = "arc.make_tuple"(%x_3, %x_4) : (tuple<si32, si32>, si32) -> tuple<tuple<si32, si32>, si32>
        %x_6 = "arc.index_tuple"(%x_5) { index = 0 } : (tuple<tuple<si32, si32>, si32>) -> tuple<si32, si32>
        %x_7 = "arc.index_tuple"(%x_6) { index = 0 } : (tuple<si32, si32>) -> si32
        %x_8 = arc.constant 1 : si32
        %x_9 = arc.cmpi eq, %x_7, %x_8 : si32
        %x_L = "arc.if"(%x_9) ({
            %x_A = "arc.index_tuple"(%x_6) { index = 1 } : (tuple<si32, si32>) -> si32
            %x_B = "arc.index_tuple"(%x_5) { index = 1 } : (tuple<tuple<si32, si32>, si32>) -> si32
            %x_C = arc.constant 1 : si32
            %x_D = arc.cmpi eq, %x_B, %x_C : si32
            %x_K = "arc.if"(%x_D) ({
                %x_E = arc.addi %x_A, %x_1 : si32
                "arc.block.result"(%x_E) : (si32) -> ()
            },{
                %x_I = constant @crate_x_H : (si32) -> si32
                %x_J = call_indirect %x_I(%x_1) : (si32) -> si32
                "arc.block.result"(%x_J) : (si32) -> ()
            }) : (i1) -> si32
            "arc.block.result"(%x_K) : (si32) -> ()
        },{
            %x_I = constant @crate_x_H : (si32) -> si32
            %x_J = call_indirect %x_I(%x_1) : (si32) -> si32
            "arc.block.result"(%x_J) : (si32) -> ()
        }) : (i1) -> si32
        return %x_L : si32
    }
}

