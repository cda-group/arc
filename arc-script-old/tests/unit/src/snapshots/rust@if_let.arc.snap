---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_pass/if_let.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    pub fn x_H(x_1: i32) -> i32 {
        let x_F: i32 = 2i32;
        let x_G: i32 = val!(x_1) + val!(x_F);
        val!(x_G)
    }
    pub fn test() -> i32 {
        let x_0: i32 = 3i32;
        let x_1: i32 = 5i32;
        let x_2: i32 = 3i32;
        let x_3: (i32, i32) = (val!(x_2), val!(x_0));
        let x_4: i32 = 1i32;
        let x_5: ((i32, i32), i32) = (val!(x_3), val!(x_4));
        let x_6: (i32, i32) = val!(x_5).0;
        let x_7: i32 = val!(x_6).0;
        let x_8: i32 = 1i32;
        let x_9: bool = val!(x_7) == val!(x_8);
        let x_L: i32 = if val!(x_9) {
            let x_A: i32 = val!(x_6).1;
            let x_B: i32 = val!(x_5).1;
            let x_C: i32 = 1i32;
            let x_D: bool = val!(x_B) == val!(x_C);
            let x_K: i32 = if val!(x_D) {
                let x_E: i32 = val!(x_A) + val!(x_1);
                val!(x_E)
            } else {
                let x_I: Box<dyn ValueFn(i32) -> i32> =
                    Box::new(x_H) as Box<dyn ValueFn(i32) -> i32>;
                let x_J: i32 = val!(x_I)(val!(x_1));
                val!(x_J)
            };
            val!(x_K)
        } else {
            let x_I: Box<dyn ValueFn(i32) -> i32> = Box::new(x_H) as Box<dyn ValueFn(i32) -> i32>;
            let x_J: i32 = val!(x_I)(val!(x_1));
            val!(x_J)
        };
        val!(x_L)
    }
}
pub use arc_script_output::*;


