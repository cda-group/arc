---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_pass/basic_pipe.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    pub fn x_1(x_2: i32) -> i32 {
        let x_3: i32 = 1i32;
        let x_4: i32 = val!(x_2) + val!(x_3);
        val!(x_4)
    }
    pub fn x_6(x_7: i32) -> i32 {
        let x_8: i32 = 1i32;
        let x_9: i32 = val!(x_7) - val!(x_8);
        val!(x_9)
    }
    pub fn test() -> i32 {
        let x_0: i32 = 3i32;
        let x_5: Box<dyn ValueFn(i32) -> i32> = Box::new(x_1) as Box<dyn ValueFn(i32) -> i32>;
        let x_A: Box<dyn ValueFn(i32) -> i32> = Box::new(x_6) as Box<dyn ValueFn(i32) -> i32>;
        let x_B: i32 = val!(x_5)(val!(x_0));
        let x_C: i32 = val!(x_A)(val!(x_B));
        val!(x_C)
    }
}
pub use arc_script_output::*;


