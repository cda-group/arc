---
source: tests/unit/src/insta.rs
expression: s
input_file: tests/unit/src/tests/expect_mlir_fail_todo/task_map.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::codegen;
    use arc_script::codegen::*;
    #[codegen::rewrite(on_event = "Map_on_event", on_start = "Map_on_start")]
    mod Map_mod {
        struct Map {
            f_0: Box<dyn ValueFn(i32) -> i32>,
        }
        #[codegen::rewrite]
        pub enum Map_IInterface {
            Map_IInterface___(Struct3keyi325valuei32End),
        }
        #[codegen::rewrite]
        pub enum Map_OInterface {
            Map_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Map_mod::Map {
        pub fn Map_on_event(&mut self, x_3: Map_IInterface) -> Unit {
            let x_0: Struct3keyi325valuei32End = unwrap!(Map_IInterface___, val!(x_3));
            let x_1: i32 = access!(val!(x_0), value);
            let x_2: i32 = access!(val!(x_0), key);
            let x_4: i32 = ((self.f_0).clone())(val!(x_1));
            let x_5: Struct3keyi325valuei32End = new!(Struct3keyi325valuei32End {
                value: val!(x_4),
                key: val!(x_2)
            });
            let x_6: Map_OInterface = enwrap!(Map_OInterface___, val!(x_5));
            let x_7: Unit = self.emit(val!(x_6));
            val!(x_7)
        }
        pub fn Map_on_start(&mut self) -> Unit {
            let x_9: Unit = ();
            val!(x_9)
        }
    }
    pub fn x_B(x_C: i32) -> i32 {
        let x_D: i32 = 1i32;
        let x_E: i32 = val!(x_C) + val!(x_D);
        val!(x_E)
    }
    pub fn main(
        input_0: Stream<<Struct3keyi325valuei32End as Convert>::T>,
    ) -> Stream<<Struct3keyi325valuei32End as Convert>::T> {
        let x_A: Box<
            dyn ValueFn(
                Box<dyn ValueFn(i32) -> i32>,
            ) -> Box<
                dyn ValueFn(
                    Stream<<Struct3keyi325valuei32End as Convert>::T>,
                ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
            >,
        > = Box::new(Map)
            as Box<
                dyn ValueFn(
                    Box<dyn ValueFn(i32) -> i32>,
                ) -> Box<
                    dyn ValueFn(
                        Stream<<Struct3keyi325valuei32End as Convert>::T>,
                    )
                        -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
                >,
            >;
        let x_F: Box<dyn ValueFn(i32) -> i32> = Box::new(x_B) as Box<dyn ValueFn(i32) -> i32>;
        let x_G: Box<
            dyn ValueFn(
                Stream<<Struct3keyi325valuei32End as Convert>::T>,
            ) -> Stream<<Struct3keyi325valuei32End as Convert>::T>,
        > = val!(x_A)(val!(x_F));
        let x_H: Stream<<Struct3keyi325valuei32End as Convert>::T> = val!(x_G)(val!(input_0));
        val!(x_H)
    }
    #[codegen::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


