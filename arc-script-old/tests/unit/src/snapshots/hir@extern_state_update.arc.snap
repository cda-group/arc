---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_state_update.arc

---
extern type Cell(x: i32) {
    extern fun get(): i32;, 
    extern fun set(x: i32): unit;
}
task Stateful(init_0: i32): ~{ key: i32, value: i32 } -> ~{ key: i32, value: i32 } {
    enum IInterface {
        __({ key: i32, value: i32 })
    }
    enum OInterface {
        __({ key: i32, value: i32 })
    }
    val state_0: crate::Cell = uninitialised;
    extern fun update(v: i32): i32;
    fun on_start(): unit {
        val x_0: fun(i32): crate::Cell = crate::Cell;
        val x_1: crate::Cell = x_0(init_0);
        val x_2: unit = initialise[state_0](x_1);
        val x_E: unit = unit;
        x_E
    }
    crate::Stateful::on_start();
    fun on_event(x_6: crate::Stateful::IInterface): unit {
        val x_3: { key: i32, value: i32 } = unwrap[crate::Stateful::IInterface::__](x_6);
        val x_4: i32 = x_3.value;
        val x_5: i32 = x_3.key;
        val x_7: fun(i32): i32 = crate::Stateful::update;
        val x_8: i32 = state_0.get();
        val x_9: i32 = x_7(x_8);
        val x_A: { key: i32, value: i32 } = { value: x_9, key: x_5 };
        val x_B: crate::Stateful::OInterface = enwrap[crate::Stateful::OInterface::__](x_A);
        val x_C: unit = emit x_B;
        x_C
    }
    on event => crate::Stateful::on_event(event)
}

