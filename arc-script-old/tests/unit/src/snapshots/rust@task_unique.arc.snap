---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_unique.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::Set;
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Unique_on_event", on_start = "Unique_on_start")]
    mod Unique_mod {
        struct Unique {
            set_0: Set,
        }
        #[arcorn::rewrite]
        pub enum Unique_IInterface {
            Unique_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Unique_OInterface {
            Unique_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Unique_mod::Unique {
        pub fn Unique_on_event(&mut self, x_6: Unique_IInterface) -> () {
            let x_3: Struct3keyi325valuei32End =
                arcorn::unwrap!(Unique_IInterface___, (x_6.clone()));
            let x_4: i32 = (x_3.clone()).value;
            let x_5: i32 = (x_3.clone()).key;
            let x_7: bool = ((self.set_0).clone()).contains((x_4.clone()));
            let x_8: bool = !(x_7.clone());
            let x_E: () = if (x_8.clone()) {
                let x_9: () = ((self.set_0).clone()).add((x_4.clone()));
                let x_A: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                    value: (x_4.clone()),
                    key: (x_5.clone()),
                };
                let x_B: Unique_OInterface = arcorn::enwrap!(Unique_OInterface___, (x_A.clone()));
                let x_C: () = self.emit((x_B.clone()));
                (x_C.clone())
            } else {
                let x_D: () = ();
                (x_D.clone())
            };
            (x_E.clone())
        }
        pub fn Unique_on_start(&mut self) -> () {
            let x_0: Box<dyn arcorn::ArcornFn() -> Set> =
                Box::new(Set::new) as Box<dyn arcorn::ArcornFn() -> Set>;
            let x_1: Set = (x_0.clone())();
            let x_2: () = (self.set_0).initialise((x_1.clone()));
            let x_G: () = ();
            (x_G.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


