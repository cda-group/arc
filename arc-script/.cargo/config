[alias]
run-ast        = "run --package=arc-script-cli -- --force-output run --output=AST"
run-hir        = "run --package=arc-script-cli -- --force-output run --output=HIR"
run-dfg        = "run --package=arc-script-cli -- --force-output run --output=DFG"
run-mlir       = "run --package=arc-script-cli -- --force-output run --output=MLIR"
run-rust       = "run --package=arc-script-cli -- --force-output run --output=Rust"
run-lsp        = "run --manifest-path=cli/Cargo.toml --features=lsp -- lsp"
run-repl       = "run --manifest-path=cli/Cargo.toml --features=repl -- repl"

rrun-ast       = "run --release --package=arc-script-cli -- --force-output run --output=AST"
rrun-hir       = "run --release --package=arc-script-cli -- --force-output run --output=HIR"
rrun-dfg       = "run --release --package=arc-script-cli -- --force-output run --output=DFG"
rrun-mlir      = "run --release --package=arc-script-cli -- --force-output run --output=MLIR"
rrun-rust      = "run --release --package=arc-script-cli -- --force-output run --output=Rust"
rrun-lsp       = "run --release --manifest-path=cli/Cargo.toml --features=lsp -- lsp"
rrun-repl      = "run --release --manifest-path=cli/Cargo.toml --features=repl -- repl"

check-web-lsp  = "check --manifest-path=website/lsp/Cargo.toml  --target=wasm32-unknown-unknown"
check-web-repl = "check --manifest-path=website/repl/Cargo.toml --target=wasm32-unknown-unknown"
debug          = "run --package=arc-script-cli -- --force-output --debug -vvvv run --output=Rust"
trace          = "run --package=arc-script-cli -- --force-output --debug -vv run --output=HIR"
build-lsp      = "build --release --package=arc-script-lsp"
build-repl     = "build --release --package=arc-script-repl"
build-cli      = "build --release --package=arc-script-cli"

ctest          = "test --package=arc-script-tests-unit"

[build]
# jobs = 1                  # number of parallel jobs, defaults to # of CPUs
# rustc = "rustc"           # the rust compiler tool
# rustc-wrapper = "…"       # run this wrapper instead of `rustc`
# rustdoc = "rustdoc"       # the doc generator tool
# target = "triple"         # build for the target triple (ignored by `cargo install`)
# target-dir = "target"     # path of where to place all generated artifacts
rustflags = [    # custom flags to pass to all compiler invocations
#   "-Z",          "debug-macros=yes", # Emit line numbers debug info inside macros
#   "-Z",                 "teach=yes", # Show extended diagnostic help
#   "-Z", "trim-diagnostic-paths=yes", # In diagnostics, use heuristics to shorten paths referring to items
#  "-Z",           "fewer-names=yes", # Reduce memory use by retaining fewer names within compilation artifacts
#  "-Z",        "share-generics=yes", # Make the current crate share its generic instantiations
#  "-Z",          "self-profile=yes", # Run the self profiler and output the raw event data
#  "-Z",                  "time=yes", # Measure time of rustc processes
#  "-Z",           "time-passes=yes", # Measure time of each rustc pass
#  "-Z",      "time-llvm-passes=yes", # Measure time of each LLVM pass
]
rustdocflags = [ # Custom flags to pass to rustdoc
    "-Z", "unstable-options", # Enable unstable options
#     "--index-page", # Provide a top-level landing page for docs
    "--enable-index-page", # Generate a default index page for docs
    "--persist-doctests", "target/rustdoctest", # Persist doctest executables after running
    "--show-coverage", # Calculate the percentage of items with documentation
    "--document-private-items", # Include private items when counting the percentage
    "--default-theme", "rust", # Set default color theme
]
# incremental = true        # whether or not to enable incremental compilation
# dep-info-basedir = "…"    # path for the base directory for targets in depfiles
# pipelining = true         # rustc pipelining

[unstable]
multitarget         = true # Allow passing multiple target flags
# named-profiles      = true # Allow defining custom profiles
namespaced-features = true # Allow features to be namespaced
#timings             = ["info"] # Emit compile times of each dependency

# [cargo-new]
# name = "Your Name"        # name to use in `authors` field
# email = "you@example.com" # email address to use in `authors` field
# vcs = "none"              # VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')

# [http]
# debug = false               # HTTP debugging
# proxy = "host:port"         # HTTP proxy in libcurl format
# ssl-version = "tlsv1.3"     # TLS version to use
# ssl-version.max = "tlsv1.3" # maximum TLS version
# ssl-version.min = "tlsv1.1" # minimum TLS version
# timeout = 30                # timeout for each HTTP request, in seconds
# low-speed-limit = 10        # network timeout threshold (bytes/sec)
# cainfo = "cert.pem"         # path to Certificate Authority (CA) bundle
# check-revoke = true         # check for SSL certificate revocation
# multiplexing = true         # HTTP/2 multiplexing
# user-agent = "…"            # the user-agent header
#
# [install]
# root = "/some/path"         # `cargo install` destination directory
#
# [net]
# retry = 2                   # network retries
# git-fetch-with-cli = true   # use the `git` executable for git operations
# offline = false             # do not access the network
#
# [profile.<name>]         # Modify profile settings via config.
# opt-level = 0            # Optimization level.
# debug = true             # Include debug info.
# debug-assertions = true  # Enables debug assertions.
# overflow-checks = true   # Enables runtime integer overflow checks.
# lto = false              # Sets link-time optimization.
# panic = 'unwind'         # The panic strategy.
# incremental = true       # Incremental compilation.
# codegen-units = 16       # Number of code generation units.
# rpath = false            # Sets the rpath linking option.
# [profile.<name>.build-override]  # Overrides build-script settings.
# # Same keys for a normal profile.
# [profile.<name>.package.<name>]  # Override profile for a package.
# # Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).
#
# [registries.<name>]  # registries other than crates.io
# index = "…"          # URL of the registry index
# token = "…"          # authentication token for the registry
#
# [registry]
# default = "…"        # name of the default registry
# token = "…"          # authentication token for crates.io
#
# [source.<name>]      # source definition and replacement
# replace-with = "…"   # replace this source with the given named source
# directory = "…"      # path to a directory source
# registry = "…"       # URL to a registry source
# local-registry = "…" # path to a local registry source
# git = "…"            # URL of a git repository source
# branch = "…"         # branch name for the git repository
# tag = "…"            # tag name for the git repository
# rev = "…"            # revision for the git repository
#
# [target.<triple>]
# linker = "…"            # linker to use
# runner = "…"            # wrapper to run executables
# rustflags = ["…", "…"]  # custom flags for `rustc`
#
# [target.<cfg>]
# runner = "…"            # wrapper to run executables
# rustflags = ["…", "…"]  # custom flags for `rustc`
#
# [target.<triple>.<links>] # `links` build script override
# rustc-link-lib = ["foo"]
# rustc-link-search = ["/path/to/foo"]
# rustc-flags = ["-L", "/some/path"]
# rustc-cfg = ['key="value"']
# rustc-env = {key = "value"}
# rustc-cdylib-link-arg = ["…"]
# metadata_key1 = "value"
# metadata_key2 = "value"
#
# [term]
# verbose = false        # whether cargo provides verbose output
# color = 'auto'         # whether cargo colorizes output
# progress.when = 'auto' # whether cargo shows progress bar
# progress.width = 80    # width of progress bar

